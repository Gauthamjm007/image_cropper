{"version":3,"sources":["components/ShowCropped.js","components/ImagePreview.js","components/ImageCropper.js","components/ImageSelector.js","App.js","serviceWorker.js","index.js"],"names":["ShowCropped","props","className","onClick","closePreview","selectionType","resolution","alt","style","maxWidth","src","croppedImageUrl","ImagePreview","state","images","handleLoader","this","map","image","index","key","name","width","height","url","value","Component","uploadFile","file","a","data","tags","upload_preset","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","ImageCropper","componentDidMount","onSelectFile","setState","handleReload","window","location","reload","onImageLoaded","imageRef","onCropComplete","crop","input","makeClientCrop","onCropChange","percentCrop","cropSelection","onResolutionChange","event","preventDefault","buttonName","target","updatedCrop","list","forEach","item","parseInt","unit","x","y","togglePreviewScreen","toggle","showPreview","handleSelectImage","selectedImage","isChecked","uploadImages","uploadAll","uploadList","loading","i","length","push","loadSuccess","returnButtonClass","button","buttonClass","active","clicked","color","returnPreviewBtnClass","selectedType","getCroppedImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","Promise","resolve","reject","toBlob","blob","URL","revokeObjectURL","fileUrl","createObjectURL","toDataURL","checkCount","filter","locked","ruleOfThirds","onComplete","onChange","type","defaultChecked","disabled","Button","variant","getDerivedStateFromProps","nextProps","prevState","ImageSelector","extension","getImageExt","parts","split","handleImage","files","inputType","includes","_URL","webkitURL","img","Image","reader","FileReader","objUrl","onload","toString","ext","e","result","readAsDataURL","Swal","fire","handleClick","click","Grid","container","spacing","xs","tabIndex","ref","startIcon","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0900297e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function ShowCropped(props) {\r\n  return (\r\n    <div className=\"final-image\">\r\n      <div className=\"background-blur\" onClick={props.closePreview}></div>\r\n      <div className=\"cover\">\r\n        <div className=\"row\">\r\n          <p>\r\n            {props.selectionType}\r\n            {props.resolution}\r\n          </p>\r\n          <button className=\"close-btn\" onClick={props.closePreview}>\r\n            x\r\n          </button>\r\n        </div>\r\n        <div className=\"row\">\r\n          <img\r\n            alt=\"Crop\"\r\n            style={{ maxWidth: \"100%\" }}\r\n            src={props.croppedImageUrl}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport { Carousel } from \"react-responsive-carousel\";\r\n\r\nexport default class ImagePreview extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      images: null,\r\n    };\r\n\r\n    this.props.handleLoader();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"image-preview\">\r\n        <div className=\"row\">\r\n          <Carousel>\r\n            {this.props.images.map((image, index) => {\r\n              return (\r\n                <div key={index}>\r\n                  <img\r\n                    alt={image.name}\r\n                    style={{\r\n                      maxWidth: \"70%\",\r\n                      width: \"auto\",\r\n                      height: \"auto\",\r\n                    }}\r\n                    src={image.url}\r\n                  />\r\n                  <p className=\"legend\">\r\n                    {image.name}- {image.value}\r\n                  </p>\r\n                </div>\r\n              );\r\n            })}\r\n          </Carousel>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ReactCrop from \"react-image-crop\";\r\nimport CroppedImgPreview from \"./ShowCropped\";\r\nimport ImagePreview from \"./ImagePreview\";\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst uploadFile = async (file) => {\r\n  let data = {\r\n    tags: \"browser_upload\",\r\n    file: file,\r\n    upload_preset: \"doc_codepen_example\",\r\n  };\r\n\r\n  var url = \"https://api.cloudinary.com/v1_1/demo/upload\";\r\n  const response = await fetch(url, {\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    cache: \"no-cache\",\r\n    credentials: \"same-origin\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    redirect: \"follow\",\r\n    referrerPolicy: \"no-referrer\",\r\n    body: JSON.stringify(data),\r\n  });\r\n  return response.json();\r\n};\r\n\r\nexport default class ImageCropper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      src: null,\r\n      cropSelection: {\r\n        unit: \"px\",\r\n        width: 755,\r\n        height: 450,\r\n        x: 0,\r\n        y: 0,\r\n        value: \"755 x 450\",\r\n        name: \"size1\",\r\n      },\r\n      list: [\r\n        {\r\n          unit: \"px\",\r\n          name: \"size1\",\r\n          value: \"755 x 450\",\r\n          width: 755,\r\n          height: 450,\r\n          x: 0,\r\n          y: 0,\r\n          url: null,\r\n          clicked: true,\r\n          isChecked: true,\r\n        },\r\n        {\r\n          unit: \"px\",\r\n          name: \"size2\",\r\n          value: \"365 x 450\",\r\n          width: 365,\r\n          height: 450,\r\n          x: 0,\r\n          y: 0,\r\n          url: null,\r\n          clicked: false,\r\n          isChecked: false,\r\n        },\r\n        {\r\n          unit: \"px\",\r\n          name: \"size3\",\r\n          value: \"365 x 212\",\r\n          width: 365,\r\n          height: 212,\r\n          x: 0,\r\n          y: 0,\r\n          url: null,\r\n          clicked: false,\r\n          isChecked: false,\r\n        },\r\n        {\r\n          unit: \"px\",\r\n          name: \"size4\",\r\n          value: \"380 x 380\",\r\n          width: 380,\r\n          height: 380,\r\n          x: 0,\r\n          y: 0,\r\n          url: null,\r\n          clicked: false,\r\n          isChecked: false,\r\n        },\r\n      ],\r\n      active: \"755 x 450\",\r\n      selectedType: \"size1\",\r\n      showPreview: false,\r\n      loading: false,\r\n      loadSuccess: false,\r\n      uploadAll: false,\r\n      uploadList: [],\r\n    };\r\n  }\r\n  componentDidMount = () => {\r\n    this.onSelectFile();\r\n  };\r\n\r\n  static getDerivedStateFromProps = (nextProps, prevState) => {\r\n    if (prevState.url !== nextProps.url) {\r\n      return {\r\n        src: nextProps.url,\r\n      };\r\n    }\r\n  };\r\n\r\n  onSelectFile = () => {\r\n    this.setState({ src: this.props.url });\r\n  };\r\n\r\n  handleReload = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  onImageLoaded = (image) => {\r\n    this.imageRef = image;\r\n  };\r\n\r\n  onCropComplete = (crop) => {\r\n    var input = { ...crop };\r\n    this.makeClientCrop(input);\r\n  };\r\n\r\n  onCropChange = (crop, percentCrop) => {\r\n    this.setState({ cropSelection: crop });\r\n  };\r\n\r\n  onResolutionChange = (event) => {\r\n    event.preventDefault();\r\n    var buttonName = event.target.name;\r\n    var updatedCrop = {};\r\n    var list = [...this.state.list];\r\n    list.forEach((item) => {\r\n      if (item.name === buttonName) {\r\n        var width = parseInt(item.width);\r\n        var height = parseInt(item.height);\r\n        updatedCrop = {\r\n          unit: \"px\",\r\n          x: item.x,\r\n          y: item.y,\r\n          width: width,\r\n          height: height,\r\n          value: item.value,\r\n          name: item.name,\r\n        };\r\n      }\r\n    });\r\n    this.onCropComplete(updatedCrop);\r\n  };\r\n\r\n  async makeClientCrop(crop) {\r\n    if (this.imageRef && crop.width && crop.height) {\r\n      const croppedImageUrl = await this.getCroppedImg(\r\n        this.imageRef,\r\n        crop,\r\n        \"newFile.jpeg\"\r\n      );\r\n\r\n      this.setState((state) => {\r\n        for (let i = 0; i < state.list.length; i++) {\r\n          if (state.list[i].value === crop.value) {\r\n            state.list[i].x = crop.x;\r\n            state.list[i].y = crop.y;\r\n            state.list[i].url = croppedImageUrl;\r\n            state.list[i].clicked = true;\r\n            const list = [...state.list];\r\n            return {\r\n              cropSelection: crop,\r\n              list: list,\r\n              active: state.list[i].value,\r\n              selectedType: state.list[i].name,\r\n              croppedImageUrl: croppedImageUrl,\r\n            };\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  getCroppedImg(image, crop, fileName) {\r\n    const canvas = document.createElement(\"canvas\");\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    canvas.width = crop.width;\r\n    canvas.height = crop.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n\r\n    var data = \"\";\r\n    new Promise((resolve, reject) => {\r\n      canvas.toBlob((blob) => {\r\n        if (!blob) {\r\n          return;\r\n        }\r\n        blob.name = fileName;\r\n        window.URL.revokeObjectURL(this.fileUrl);\r\n        this.fileUrl = window.URL.createObjectURL(blob);\r\n        resolve(this.fileUrl);\r\n      }, \"image/jpeg\");\r\n      data = canvas.toDataURL();\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  togglePreviewScreen = (event) => {\r\n    var toggle = !this.state.showPreview;\r\n    this.setState({ showPreview: toggle });\r\n  };\r\n\r\n  handleSelectImage = (event) => {\r\n    let selectedImage = event.target.name;\r\n    var list = [...this.state.list];\r\n\r\n    list.forEach((item) => {\r\n      if (item.name === selectedImage) {\r\n        item.isChecked = !item.isChecked;\r\n      }\r\n    });\r\n\r\n    this.setState({ list: list });\r\n  };\r\n\r\n  uploadImages = async (event) => {\r\n    var toggle = !this.state.uploadAll;\r\n    var list = [...this.state.list];\r\n    var uploadList = [];\r\n    this.setState({ loading: true });\r\n    for (let i = 0; i < list.length; i++) {\r\n      if (list[i].isChecked) {\r\n        let response = await uploadFile(list[i].url);\r\n        if (response) {\r\n          list[i].url = response.url;\r\n          uploadList.push(list[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      list: list,\r\n      loading: false,\r\n      loadSuccess: true,\r\n      uploadAll: toggle,\r\n      uploadList: uploadList,\r\n    });\r\n  };\r\n\r\n  handleLoader = (event) => {\r\n    this.setState({ loadSuccess: false });\r\n  };\r\n\r\n  returnButtonClass = (button) => {\r\n    let buttonClass = \"\";\r\n    if (this.state.active === button.value && button.clicked === true) {\r\n      buttonClass = button.color + \" clicked\";\r\n    } else if (this.state.active === button.value && button.clicked === false) {\r\n      buttonClass = button.color;\r\n    } else if (this.state.active !== button.value && button.clicked === true) {\r\n      buttonClass = \"clicked\";\r\n    }\r\n\r\n    return buttonClass;\r\n  };\r\n\r\n  returnPreviewBtnClass = () => {\r\n    let buttonClass = \"\";\r\n    var list = [...this.state.list];\r\n\r\n    list.forEach((item) => {\r\n      if (item.value === this.state.active) {\r\n        buttonClass = item.color;\r\n      }\r\n    });\r\n\r\n    return \"preview-button \" + buttonClass;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      cropSelection,\r\n      croppedImageUrl,\r\n      src,\r\n      list,\r\n      uploadList,\r\n    } = this.state;\r\n    var checkCount = list.filter((item) => {\r\n      return item.isChecked === true;\r\n    });\r\n\r\n    return (\r\n      <div className=\"image-cropper\">\r\n        {!this.state.uploadAll && (\r\n          <div className=\"preview-image\">\r\n            <ReactCrop\r\n              src={src}\r\n              crop={cropSelection}\r\n              locked\r\n              ruleOfThirds\r\n              onImageLoaded={this.onImageLoaded}\r\n              onComplete={this.onCropComplete}\r\n              onChange={this.onCropChange}\r\n            />\r\n          </div>\r\n        )}\r\n        {!this.state.uploadAll && (\r\n          <div className=\"button-group\">\r\n            {list.map((button, index) => {\r\n              return (\r\n                <div className=\"buttons\" key={button.value}>\r\n                  <input\r\n                    type=\"button\"\r\n                    name={button.name}\r\n                    className={this.returnButtonClass(button)}\r\n                    value={button.value}\r\n                    onClick={this.onResolutionChange}\r\n                  />\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name={button.name}\r\n                    defaultChecked={button.isChecked}\r\n                    onClick={this.handleSelectImage}\r\n                    disabled={!button.clicked}\r\n                  ></input>\r\n                </div>\r\n              );\r\n            })}\r\n\r\n            <div className=\"button-row\">\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={checkCount.length < 1 ? true : false}\r\n                onClick={this.uploadImages}\r\n              >\r\n                Upload Selected ({checkCount.length})\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {this.state.showPreview && (\r\n          <CroppedImgPreview\r\n            croppedImageUrl={croppedImageUrl}\r\n            closePreview={this.togglePreviewScreen}\r\n            resolution={this.state.active}\r\n            selectionType={this.state.selectedType}\r\n          ></CroppedImgPreview>\r\n        )}\r\n        {this.state.loading && (\r\n          <div className=\"loader-screen\">\r\n            <div className=\"blur-screen\"></div>\r\n            <div className=\"cover\">\r\n              <div className=\"row\">\r\n                <p>Uploading {checkCount.length} cropped images to Cloud</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {this.state.loadSuccess && (\r\n          <div className=\"loader-screen\">\r\n            <div className=\"blur-screen\"></div>\r\n            <div className=\"cover\">\r\n              <div className=\"row\">\r\n                <p>Uploaded Images Successfully</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {this.state.uploadAll && (\r\n          <>\r\n            <ImagePreview\r\n              images={uploadList}\r\n              handleLoader={this.handleLoader}\r\n            ></ImagePreview>\r\n            <br />\r\n            <button onClick={this.handleReload}>Back</button>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ImageCropper from \"./ImageCropper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport Swal from \"sweetalert2\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nexport default class ImageSelector extends Component {\r\n  state = {\r\n    selectedImage: null,\r\n    name: \"No file chosen\",\r\n    extension: null,\r\n    fileUrl: null,\r\n  };\r\n\r\n  getImageExt = (type) => {\r\n    const parts = type.split(\"/\");\r\n    return parts[parts.length - 1];\r\n  };\r\n\r\n  handleImage = (event) => {\r\n    var input = event.target.files[0];\r\n    var inputType = input.type;\r\n\r\n    if (inputType.includes(\"image\")) {\r\n      var _URL = window.URL || window.webkitURL;\r\n      var img = new Image();\r\n      var reader = new FileReader();\r\n      var objUrl = _URL.createObjectURL(input);\r\n      img.onload = () => {\r\n        var width = img.width.toString();\r\n        var height = img.height.toString();\r\n        if (width === \"1024\" && height === \"1024\") {\r\n          _URL.revokeObjectURL(objUrl);\r\n          var ext = this.getImageExt(inputType);\r\n          reader.onload = (e) => {\r\n            const src = e.target.result;\r\n            this.setState({\r\n              selectedImage: input,\r\n              name: input.name,\r\n              extension: ext,\r\n              fileUrl: src,\r\n            });\r\n          };\r\n\r\n          reader.readAsDataURL(input);\r\n        } else {\r\n          Swal.fire(\r\n            \"Error Uploading Photo\",\r\n            \"Please upload an Image of 1024 X 1024 size\",\r\n            \"error\"\r\n          );\r\n          this.setState({\r\n            selectedImage: null,\r\n            name: \"No file chosen\",\r\n            extension: null,\r\n            fileUrl: null,\r\n          });\r\n        }\r\n      };\r\n\r\n      img.src = objUrl;\r\n    } else {\r\n      Swal.fire(\"Error \", \"You can upload only Images\", \"error\");\r\n    }\r\n  };\r\n\r\n  handleClick = (event) => {\r\n    event.preventDefault();\r\n    this.input.click(event);\r\n  };\r\n\r\n  handleReload = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"navbar\">\r\n          <div onClick={this.handleReload}>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={2}>\r\n                <h2>Image 4 Cropper</h2>\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                <img\r\n                  src=\"https://i.ibb.co/r33Sw3D/crop.png\"\r\n                  alt=\"logo\"\r\n                  style={{ width: 30, height: 30 }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </div>\r\n        {this.state.name === \"No file chosen\" ? (\r\n          <div className=\"upload-section\">\r\n            <input\r\n              type=\"file\"\r\n              tabIndex=\"-1\"\r\n              className=\"hidden-input\"\r\n              onChange={this.handleImage}\r\n              ref={(x) => (this.input = x)}\r\n            ></input>\r\n            <div className=\"input-cover\" onClick={this.handleClick}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<CloudUploadIcon />}\r\n              >\r\n                Upload Image\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <ImageCropper url={this.state.fileUrl}></ImageCropper>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ImageSelector from \"./components/ImageSelector\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ImageSelector></ImageSelector>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}